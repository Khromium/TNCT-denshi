mp9ex01.txt


1.課題
プッシュスイッチ0を押した瞬間からLED0は１秒間点灯し、１秒間消灯 し、
１秒間点灯して動作を終了する。（ON-OFF-ON-OFF）　このLED0の動作をLED0定型動作とする。
プッシュスイッチ1を押した瞬間からLED1は１秒間点灯し、１秒間消灯し、
１秒間点灯して動作を終了する。（ON-OFF-ON-OFF）このLED1の動作をLED1定型動作とする。

ただし、LED0が定型動作中にプッシュスイッチ0が押されたら、残り定 型動作時間には無関係に、その時点か
ら新たに定型動作を開始するものとする。
同様に、LED1が定型動作中にプッシュスイッチ1が押されたら残り定型動作時間には無関係に、その時点から
新たに定型動作を開始するものとする。
また、LED0が定型動作中にプッシュスイッチ1が押されたら、LED0の定型動作には影響を与えず、LED1は、
定型動作を開始するものとする。
同様に、LED1が定型動作中にプッシュスイッチ0が押されたら、LED1の定型動作には影響を与えず、LED0 は、
定型動作を開始するものとする。
この動作も前例題と同様に独立動作である。
なお，例題では失敗作と成功例があるが，どのように失敗していて，どのようにして成功させたかを考察で述べなさい。


2.使用したプログラムおよび実行結果
/**********************************************************
PushSW1でLED0をPushSW2でLED0を2秒間点灯させる
この２つの作業は独立に行われる
**********************************************************/
#include <3048fone.h>
#include "h8_3048fone.h"

volatile int count1=-1;/*LED0用カウンタ　-1の時は休止中*/
volatile int count2=-1;/*LED1用カウンタ　-1の時は休止中*/
main()
{
    initLed();
    initPushSW();/*PushSWの初期化*/
    initTimer1Int(10000); /*時間割り込み10000μsec=10msec ch1使用*/
    E_INT();        /*CPU割り込み許可*/
    startTimer1();  /*時間割り込みタイマスタートch1*/
    while(1) {
        if ((count1==-1 || 50<count1) && checkPushSW(0)==1) {
            count1=0;
            turnOnLed(0);
        } else if (100<count1 && count1<200) {/*100カウントで1秒経過*/
            turnOffLed(0);
        } else if (200<count1 && count1<300) { /*100カウントで1秒経過*/
            turnOnLed(0);
        } else if (300<count1) {/*100カウントで1秒経過*/
            count1=-1;
            turnOffLed(0);
        }
        if ((count2==-1 || 50<count2) && checkPushSW(1)==1) {
            count2=0;
            turnOnLed(1);
        } else if (100<count2 && count2<200) {/*100カウントで1秒経過*/
            turnOffLed(1);
        } else if (200<count2 && count2<300) { /*100カウントで1秒経過*/
            turnOnLed(1);
        } else if (300<count2) {/*100カウントで1秒経過*/
            count2=-1;
            turnOffLed(1);
        }
    }
}

#pragma asm
        .SECTION    MYVEC, DATA, LOCATE=H'000070
        .ORG        H'000070  ;IMIA1
        .DATA.L     _TimerIntFunc
        .SECTION    P,CODE,ALIGN=2 ;これを忘れてはいけない
#pragma endasm

#pragma interrupt (TimerIntFunc)
void TimerIntFunc() /*タイマ割り込みルーチン*/
{
    static int tick=0;
    clearTimer1Flag();  /*タイマステータスフラグのクリア 忘れないこと*/
    if (count1!=-1) count1++;
    if (count2!=-1) count2++;
}


3.考察
失敗例のほうでは，LEDの動作が始まってからスイッチの入力を取得していないので，課題内にある「LED0が定型動作中にプッシュスイッチ0が押されたら、残り定 型動作時間には無関係に、　その時点から新たに定型動作を開始するものとする。」という処理が実現できていない．
成功例では定型動作中にもスイッチ入力を取得するため，if分の条件に50<countをついかしている．

4.まとめ
独立した複数の処理をすることが実現できた．